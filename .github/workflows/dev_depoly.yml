name: CI/CD Pipeline

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: ally050204!
          MYSQL_DATABASE: seoulmate
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    env:
      fluent.api.key: ${{ secrets.FLUENT_API_KEY }}
      fluent.api.username: ${{ secrets.FLUENT_API_USERNAME }}
      fluent.api.password: ${{ secrets.FLUENT_API_PASSWORD }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Make application.yml
        run: |
          cd ./src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > ./application.yml
        shell: bash

      - name: Make application-prod.yml
        run: |
          cd ./src/main/resources
          echo "${{ secrets.APPLICATION_PROD_YML }}" > ./application-prod.yml
        shell: bash

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: seoulmateServer
          path: build/libs/*.jar

  deploy:
      needs: build
      runs-on: ubuntu-latest

      steps:
          - name: Download build artifact
            uses: actions/download-artifact@v3
            with:
              name: seoulmateServer
              path: build/libs/

          - name: Deploy to EC2
            env:
              EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
              EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
              EC2_HOST: ${{ secrets.EC2_HOST }}

            run:
              echo "$EC2_SSH_KEY" > private_key.pem     
              chmod 600 private_key.pem
              jar_file=$(find build/libs -name '*.jar' ! -name '*plain.jar' | head -n 1)
              scp -i private_key.pem -o StrictHostKeyChecking=no "$jar_file" $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/seoulmateServer.jar
              ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "
              pgrep java | xargs -r kill -15 
              sleep 10
              nohup java -jar /home/$EC2_USERNAME/seoulmateServer.jar > app.log 2>&1 & 
              "
              rm -f private_key.pem
